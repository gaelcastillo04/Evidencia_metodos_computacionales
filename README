# üìÑ Evidencia

En esta pr√°ctica, se busca desarrollar una peque√±a interfaz de lenguaje natural controlado para emitir comandos a un robot virtual. Este robot es capaz de realizar acciones simples como moverse, girar y detenerse. Las instrucciones deben seguir una estructura clara, amable y definida, similar a c√≥mo una persona se dirig√≠a educadamente a un asistente rob√≥tico.  
El objetivo principal es contruir el analizador l√©xico (Lex) y un analizador sint√°ctico (YACC) capaces de procesar y validar un conjunto restringido de isntrucciones escritas en lenguaje natural simple.

---

## üîç Analizador l√©xico (LEX)

El analizador l√©xico tiene la tarea de leer una entrada que contiene instrucciones destinadas a un robot y desglosarla en unidades l√©xicas de importancia denominadas *tokens*. Estas unidades facilitar√°n al compilador la comprensi√≥n de los diferentes elementos de las frases, tales como:

- *Sustantivos*: indican entidades o elementos del entorno del robot (ej. "Robot", "blocks", "degrees").  
- *Verbos*: describen las acciones que el robot puede ejecutar (ej. "move", "turn", "stop").  
- *Palabras de cortes√≠a*: ayudan a que las instrucciones sean m√°s "humanas" y amables (ej. "please", "thank you").  
- *N√∫meros*: representan cantidades ({1-10}, {90, 180, 270, 360}).  
- *Conectores y preposiciones*: indican orden o direcci√≥n (ej. "and", "then", "ahead", "right").  

El analizador l√©xico debe tener la habilidad de identificar estas categor√≠as, pasar por alto espacios o tabulaciones, y *informar sobre cualquier s√≠mbolo no identificado como error*.

---

### üìå Definici√≥n de tokens

### ‚úÖ Lista de ejemplos aceptados:

- Robot please move 3 blocks ahead, and then turn 90 degrees.  
- Please robot move 3 blocks, and then turn 360 degrees.  
- Robot please move 3 blocks ahead and then turn 90 degrees, then move 2 blocks  

### ‚ùå Ejemplos rechazados:

- Robot turn 80 degrees  
- Robot please move 8 blocks now.  
- Robot please turn 78 degrees  

---

## üß† Analizador sint√°ctico (YACC)

El analizador sint√°ctico necesita emplear los tokens suministrados por Lex para verificar si la secuencia de instrucciones satisface la gram√°tica prevista. El objetivo es establecer una *gram√°tica libre de contexto (CFG) no ambigua*, que facilite la identificaci√≥n √∫nicamente de aquellas frases que constituyan instrucciones v√°lidas para el robot.

Las frases v√°lidas deben satisfacer las siguientes propiedades:

- Iniciar siempre con la palabra "Robot".  
- Usar formas educadas o directas pero correctas (como "please move", "turn", "stop").  
- Incluir informaci√≥n suficiente sobre la acci√≥n: qu√© hacer, cu√°ntos bloques avanzar, cu√°ntos grados girar, etc. Cabe aclarar que deben de ser los n√∫meros dentro del rango de lo que se pide.  

En cambio, el sistema debe tener la habilidad de *descartar frases ambiguas, incompletas o incorrectas*, como las que alteren el orden de las palabras, empleen t√©rminos no identificados o muestren una sintaxis confusa.

---

### üìê Definici√≥n de CFG

```bnf
%%
program:
    sentence_list
    ;

sentence_list:
    structure_sentence DOT
    | structure_sentence DOT sentence_list
    ;

structure_sentence:
    requirements sentence requirements{
        if (please_counter == 0){
            yyerror("Syntax error: You must use at least 'please' at the beginning or end of the sentence.\n");
            YYABORT;
        }
            please_counter=0;
    }
    ;

requirements:
    /* nothing */
    | SUBJECT COURTESY_WORD {please_counter=1;}
    | COURTESY_WORD SUBJECT {please_counter=1;}
    | SUBJECT
    | COURTESY_WORD {please_counter=1;}
    ;

sentence:
    complex_verb
    ;


complex_verb:
    verb_phrase
    | verb_phrase CONNECTOR sentence
    ;

optional_comma:
    /* nothing */
    | COMMA
    ;

verb_phrase:
    move_phrase optional_comma
    | move_phrase DIRECTION optional_comma
    | rotate_phrase optional_comma
    | move_backward_phrase optional_comma 
    ;

move_phrase:
    MOVE NUMBER BLOCKS
    {
        fprintf(output, "MOV,%d\n", $2);
    }
    ;

move_backward_phrase:
    MOVE NUMBER BLOCKS BACKWARD
    {
        fprintf(output, "TURN,180\n");
        fprintf(output, "MOV,%d\n", $2);
        fprintf(output, "TURN,180\n");
    }
    ;

rotate_phrase:
    TURN DEGREE DEGREES
    {
        fprintf(output, "TURN,%d\n", $2);
    }
    ;

%%
